import { IConnector } from "../../common/connector";
import { TypeIdentifier, DatabaseType } from "prisma-datamodel";
import { RelationalIntrospectionResult } from "./relationalIntrospectionResult";
export declare abstract class RelationalConnector implements IConnector {
    abstract getDatabaseType(): DatabaseType;
    abstract introspect(schema: string): Promise<RelationalIntrospectionResult>;
    abstract listSchemas(): Promise<string[]>;
    abstract listModels(schema: string): Promise<Table[]>;
}
export declare class Table {
    name: string;
    columns: Column[];
    relations: TableRelation[];
    constructor(name: string, columns: Column[], relations: TableRelation[]);
    hasPrimaryKey(): boolean;
    isJoinTable(): boolean;
    isRelationColumn(column: Column): boolean;
    getRelationTargetTableName(column: Column): string;
}
export interface Column {
    name: string;
    isUnique: boolean;
    isPrimaryKey: boolean;
    defaultValue: any;
    type: string;
    typeIdentifier: TypeIdentifier;
    comment: string | null;
    nullable: boolean;
}
export interface TableRelation {
    source_table: string;
    target_table: string;
    source_column: string;
    target_column: string;
}
export interface PrimaryKey {
    tableName: string;
    fields: string[];
}
