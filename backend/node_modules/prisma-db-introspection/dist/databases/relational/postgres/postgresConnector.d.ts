import { RelationalConnector } from '../relationalConnector';
import { Table, TableRelation, PrimaryKey } from '../relationalConnector';
import { Client } from 'pg';
import { TypeIdentifier, DatabaseType } from 'prisma-datamodel';
import { PostgresIntrospectionResult } from './postgresIntrospectionResult';
export declare class PostgresConnector extends RelationalConnector {
    client: Client;
    connectionPromise: Promise<any>;
    constructor(client: Client);
    getDatabaseType(): DatabaseType;
    listSchemas(): Promise<string[]>;
    introspect(schema: string): Promise<PostgresIntrospectionResult>;
    listModels(schemaName: string): Promise<Table[]>;
    queryTableColumns(schemaName: string): Promise<{
        [key: string]: any[];
    }>;
    queryPrimaryKeys(schemaName: string): Promise<PrimaryKey[]>;
    queryRelations(schemaName: string): Promise<TableRelation[]>;
    querySchemas(): Promise<any[]>;
    parseDefaultValue(string: any): any;
    toTypeIdentifier(type: string, field: string, isPrimaryKey: boolean): {
        typeIdentifier: TypeIdentifier | null;
        comment: string | null;
        error: string | null;
    };
}
