"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var relationalIntrospectionResult_1 = require("../relationalIntrospectionResult");
var prisma_datamodel_1 = require("prisma-datamodel");
var _ = require("lodash");
// TODO: This class holds too much logic.
// TODO: This class duplicates too much logic and has too many assumptions about how types may look. 
var PostgresIntrospectionResult = /** @class */ (function (_super) {
    __extends(PostgresIntrospectionResult, _super);
    function PostgresIntrospectionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PostgresIntrospectionResult.prototype.infer = function (dbTables) {
        return __awaiter(this, void 0, void 0, function () {
            var typeCandidates, joinTables, types;
            var _this = this;
            return __generator(this, function (_a) {
                typeCandidates = dbTables.filter(function (t) { return !t.isJoinTable(); });
                joinTables = dbTables.filter(function (t) { return t.isJoinTable(); });
                types = typeCandidates.map(function (tc) {
                    var name = prisma_datamodel_1.capitalize(tc.name);
                    var directives = [{
                            name: 'pgTable',
                            arguments: {
                                name: "\"" + tc.name + "\""
                            }
                        }];
                    var fields = tc.columns.map(function (column) {
                        var directives = [];
                        if (column.isPrimaryKey && column.name !== 'id') {
                            directives.push({
                                name: "pgColumn",
                                arguments: {
                                    name: "\"" + column.name + "\""
                                }
                            });
                        }
                        // TODO: Remove magic AUTO INCREMENT constant. 
                        var defaultValue = column.defaultValue && column.defaultValue.trim() !== '[AUTO INCREMENT]' ? column.defaultValue : null;
                        var isUnique = column.isUnique;
                        return {
                            name: column.isPrimaryKey ? 'id' : column.name,
                            type: column.typeIdentifier || '<Unknown>',
                            defaultValue: defaultValue,
                            isId: column.isPrimaryKey,
                            isList: false,
                            isReadOnly: false,
                            // TODO: We should turn of isRequired in case of auto-increment. 
                            isRequired: !column.nullable,
                            isUnique: column.isUnique,
                            relatedField: null,
                            relationName: null,
                            directives: directives,
                            comments: column.comment === null ? [] : [{
                                    isError: true,
                                    text: column.comment
                                }]
                        };
                    });
                    var inlineRelations = tc.relations.filter(function (relation) {
                        return relation.source_table === tc.name;
                    });
                    var inlineRelationFields = inlineRelations.map(function (relation) {
                        var ambiguousRelations = tc.relations.filter(function (innerRelation) { return innerRelation.source_table === relation.source_table && innerRelation.target_table === relation.target_table; });
                        var remoteColumns = _.intersectionWith(tc.columns, ambiguousRelations, function (a, b) { return a.name === b.source_column; });
                        var selfAmbiguousRelations = ambiguousRelations.filter(function (relation) { return relation.source_table === relation.target_table; });
                        var selfRemoteColumns = _.intersectionWith(tc.columns, selfAmbiguousRelations, function (a, b) { return a.name === b.source_column; });
                        var relationName = prisma_datamodel_1.plural(relation.source_table) + '_' + prisma_datamodel_1.plural(_this.removeIdSuffix(relation.source_column));
                        var directives = [{
                                name: "pgRelation",
                                arguments: {
                                    column: "\"" + relation.source_column + "\""
                                }
                            }];
                        var isAmbigous = ambiguousRelations.length > 1 && remoteColumns && remoteColumns.length > 0 ||
                            selfAmbiguousRelations.length > 0 && selfRemoteColumns && selfRemoteColumns.length > 0;
                        return {
                            name: _this.removeIdSuffix(relation.source_column),
                            type: prisma_datamodel_1.capitalize(relation.target_table),
                            isReadOnly: false,
                            isRequired: false,
                            isId: false,
                            isUnique: false,
                            defaultValue: null,
                            isList: false,
                            relatedField: null,
                            relationName: isAmbigous ? prisma_datamodel_1.camelCase(relationName) : null,
                            directives: directives
                        };
                    });
                    var relationTables = joinTables.reduce(function (relations, joinTable) {
                        if (joinTable.relations.some(function (relation) { return relation.target_table === tc.name; })) {
                            return relations.concat(joinTable.relations.filter(function (relation) { return relation.target_table !== tc.name; }));
                        }
                        else {
                            return relations;
                        }
                    }, []);
                    var relations = tc.relations.filter(function (relation) {
                        return relation.target_table === tc.name &&
                            // Join tables are rendered seperately.
                            !joinTables.some(function (x) { return x.name === relation.target_table; });
                    });
                    var relationFields = relations.map(function (relation) {
                        var ambiguousRelations = tc.relations.filter(function (innerRelation) { return innerRelation.source_table === relation.source_table && innerRelation.target_table === relation.target_table; });
                        var fieldName = ambiguousRelations.length > 1
                            ? prisma_datamodel_1.plural(relation.source_table) + '_' + prisma_datamodel_1.plural(_this.removeIdSuffix(relation.source_column))
                            : prisma_datamodel_1.plural(relation.source_table);
                        var selfAmbiguousRelations = ambiguousRelations.filter(function (relation) { return relation.source_table === relation.target_table; });
                        var isAmbigous = ambiguousRelations.length > 1 || selfAmbiguousRelations.length > 0;
                        return {
                            name: fieldName,
                            type: prisma_datamodel_1.capitalize(relation.source_table),
                            isRequired: true,
                            isReadOnly: false,
                            isId: false,
                            isList: true,
                            isUnique: false,
                            defaultValue: null,
                            relatedField: null,
                            relationName: isAmbigous ? prisma_datamodel_1.camelCase(fieldName) : null
                        };
                    });
                    var relationTableFields = relationTables.map(function (relation) {
                        var directives = [{
                                name: "pgRelationTable",
                                arguments: {
                                    table: "\"" + relation.source_table,
                                    name: "\"" + relation.source_table
                                }
                            }];
                        // TODO Include directives
                        return {
                            name: prisma_datamodel_1.plural(relation.target_table),
                            isList: true,
                            isRequired: true,
                            isId: false,
                            isUnique: false,
                            defaultValue: null,
                            relatedField: null,
                            relationName: null,
                            isReadOnly: false,
                            type: prisma_datamodel_1.capitalize(relation.target_table)
                        };
                    });
                    var allFields = __spread((_.differenceWith(fields, inlineRelationFields, function (a, b) {
                        return _this.removeIdSuffix(a.name) === _this.removeIdSuffix(b.name);
                    })), inlineRelationFields, relationFields, relationTableFields);
                    // TODO: If has zero valid fields, don't render. 
                    return {
                        name: name,
                        fields: allFields,
                        isEmbedded: false,
                        isEnum: false,
                        directives: directives
                    };
                });
                return [2 /*return*/, {
                        types: types
                    }];
            });
        });
    };
    PostgresIntrospectionResult.prototype.removeIdSuffix = function (string) {
        function removeSuffix(suffix, string) {
            if (string.endsWith(suffix)) {
                return string.substring(0, string.length - suffix.length);
            }
            else {
                return string;
            }
        }
        return removeSuffix('_ID', removeSuffix('_id', removeSuffix('Id', string)));
    };
    return PostgresIntrospectionResult;
}(relationalIntrospectionResult_1.RelationalIntrospectionResult));
exports.PostgresIntrospectionResult = PostgresIntrospectionResult;
//# sourceMappingURL=postgresIntrospectionResult.js.map